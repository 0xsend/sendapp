name: CI

on:
  merge_group:
  pull_request:
  push:
    branches: [main, dev]
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_next_image:
    name: Build Next.js Docker Image
    # Testing, uncomment when ready
    # if: ${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' || github.head_ref == 'dev' || github.head_ref == 'main' }}
    runs-on: arc-runner-set
    permissions:
      contents: read
      packages: write # Required to push to GHCR
      id-token: write # Required for OIDC login to some registries, if needed
    outputs:
      tags: ${{ steps.meta.outputs.tags }} # Output tags from metadata action
      labels: ${{ steps.meta.outputs.labels }} # Output labels from metadata action
    env:
      # Define build args here, potentially pulling from secrets
      # Example: NEXT_PUBLIC_SUPABASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SUPABASE_PROJECT_ID }}
      # Ensure all required args from docker-compose.yml are defined
      CI: true # Example build arg
      NEXT_PUBLIC_SUPABASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SUPABASE_PROJECT_ID }}
      NEXT_PUBLIC_URL: ${{ secrets.NEXT_PUBLIC_URL }}
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_GRAPHQL_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_GRAPHQL_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      NEXT_PUBLIC_MAINNET_RPC_URL: ${{ secrets.NEXT_PUBLIC_MAINNET_RPC_URL }}
      NEXT_PUBLIC_BASE_RPC_URL: ${{ secrets.NEXT_PUBLIC_BASE_RPC_URL }}
      NEXT_PUBLIC_BUNDLER_RPC_URL: ${{ secrets.NEXT_PUBLIC_BUNDLER_RPC_URL }}
      NEXT_PUBLIC_MAINNET_CHAIN_ID: ${{ secrets.NEXT_PUBLIC_MAINNET_CHAIN_ID }}
      NEXT_PUBLIC_BASE_CHAIN_ID: ${{ secrets.NEXT_PUBLIC_BASE_CHAIN_ID }}
      NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID }}
      NEXT_PUBLIC_TURNSTILE_SITE_KEY: ${{ secrets.NEXT_PUBLIC_TURNSTILE_SITE_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set Environment Variables from Template
        run: |
          chmod +x ./scripts/github-actions-set-env-from-template.sh
          ./scripts/github-actions-set-env-from-template.sh .env.local.template

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/next-app
          tags: |
            type=sha,prefix= # Git SHA tag (e.g., sha-abcdef1)
            type=ref,event=branch # Branch name tag (e.g., main, dev)
            type=ref,event=pr # PR number tag (e.g., pr-123)
            type=ref,event=tag # Git tag (e.g., v1.0.0)
            # Add other tag types if needed

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx # Give the step an ID if needed elsewhere, otherwise optional
        uses: docker/setup-buildx-action@v3

      - name: Generate Build Args
        id: build-args
        run: |
          # Build a complete string of all build args in Bash
          build_args="CI=${CI}"
          
          # Add all NEXT_PUBLIC_ variables from the environment
          for var in $(env | grep -o "^NEXT_PUBLIC_[^=]*"); do
            # Use Bash variable reference for indirect expansion
            value=$(printenv "$var")
            if [[ -n "$value" ]]; then
              build_args="${build_args} ${var}=${value}"
            fi
          done
          
          # Add other important variables
          for var in ANVIL_BASE_FORK_URL SECRET_SHOP_PRIVATE_KEY SEND_ACCOUNT_FACTORY_PRIVATE_KEY SNAPLET_HASH_KEY SUPABASE_DB_URL SUPABASE_JWT_SECRET SUPABASE_SERVICE_ROLE SHOVEL_QUIET TEMPORAL_ADDR; do
            # Use Bash variable reference for indirect expansion
            value=$(printenv "$var")
            if [[ -n "$value" ]]; then
              build_args="${build_args} ${var}=${value}"
            fi
          done
          
          # Output the complete string as a single value
          echo "build_args=${build_args}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        id: build-push # Give the step an ID
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/next/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ steps.build-args.outputs.build_args }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  unit-tests:
    name: Unit Tests
    runs-on: arc-runner-set
    env:
      ANVIL_MAINNET_FORK_URL: ${{ secrets.CI_ANVIL_MAINNET_FORK_URL }}
      ANVIL_BASE_FORK_URL: ${{ secrets.CI_ANVIL_BASE_FORK_URL }}
      FOUNDRY_BASE_SEPOLIA_RPC_URL: ${{ secrets.CI_FOUNDRY_BASE_SEPOLIA_RPC_URL }}
      YARN_ENABLE_HARDENED_MODE: 0

    steps:
      - name: Add hosts to /etc/hosts
        run: |
          sudo su
          if grep -q "host.docker.internal" /etc/hosts; then
            echo "Hosts file already contains host.docker.internal"
          else
            echo "127.0.0.1 host.docker.internal" | sudo tee -a /etc/hosts
          fi
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 2
      - name: Setup Environment
        uses: ./.github/actions/setup-env
        env:
          YARN_ENABLE_HARDENED_MODE: 0
        with:
          yarn-install: false
      - name: Tilt CI
        id: tilt-ci
        shell: bash
        run: tilt ci unit-tests --timeout=15m
      - name: Tilt Down
        # always run tilt down if tilt ci started
        if: always() && steps.tilt-ci.outcome != 'skipped'
        shell: bash
        run: tilt down
      # @todo anvil fixtures cause dirty repo, but only in github actions ðŸ˜¢
      - name: All Changes Committed
        shell: bash
        run: git diff # --exit-code

  lint:
    name: Lint
    runs-on: arc-runner-set
    env:
      ANVIL_MAINNET_FORK_URL: ${{ secrets.CI_ANVIL_MAINNET_FORK_URL }}
      ANVIL_BASE_FORK_URL: ${{ secrets.CI_ANVIL_BASE_FORK_URL }}
      FOUNDRY_BASE_SEPOLIA_RPC_URL: ${{ secrets.CI_FOUNDRY_BASE_SEPOLIA_RPC_URL }}
      YARN_ENABLE_HARDENED_MODE: 0

    steps:
      - name: Add hosts to /etc/hosts
        run: |
          sudo su
          if grep -q "host.docker.internal" /etc/hosts; then
            echo "Hosts file already contains host.docker.internal"
          else
            echo "127.0.0.1 host.docker.internal" | sudo tee -a /etc/hosts
          fi
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          filter: 'blob:none'
          fetch-depth: 0
      - name: Setup Environment
        uses: ./.github/actions/setup-env
        env:
          YARN_ENABLE_HARDENED_MODE: 0
        with:
          build-nextjs: 'false'
          yarn-install: false

      - name: Lint deps
        shell: bash
        run: |
          tilt ci lint:deps

      - name: Set Workers Count
        id: workers
        shell: bash
        run: |
          # set to max workers 1 until we figure out which task is causing the runner to disconnect
          workers=$(MAX_WORKERS=1 node ./.devops/bin/worker-count)
          echo "workers=$workers" >> $GITHUB_OUTPUT
      - name: Lint
        run: |
          npx turbo run lint --affected --concurrency=${{ steps.workers.outputs.workers }}
        env:
          # app:lint is heavy on memory, so we need to increase the limit
          NODE_OPTIONS: --max_old_space_size=8192
          TURBO_SCM_BASE: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.event.before }}

  playwright-tests:
    name: Playwright Tests (Shard ${{ matrix.shard }}/4)
    needs: [build_next_image]
    # Testing, uncomment when ready
    # if: ${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' || github.head_ref == 'dev' || github.head_ref == 'main' }}
    runs-on: arc-runner-set
    strategy:
      # Don't stop all shards if one fails
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4]
    env:
      ANVIL_MAINNET_FORK_URL: ${{ secrets.CI_ANVIL_MAINNET_FORK_URL }}
      ANVIL_BASE_FORK_URL: ${{ secrets.CI_ANVIL_BASE_FORK_URL }}
      YARN_ENABLE_HARDENED_MODE: 0
      NEXT_APP_IMAGE_TAG: ${{ needs.build_next_image.outputs.tags }}

    # for writing PR comments
    permissions:
      pull-requests: write

    timeout-minutes: 45

    steps:
      - name: Add hosts to /etc/hosts
        run: |
          sudo su
          if grep -q "host.docker.internal" /etc/hosts; then
            echo "Hosts file already contains host.docker.internal"
          else
            echo "127.0.0.1 host.docker.internal" | sudo tee -a /etc/hosts
          fi
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup Environment
        uses: ./.github/actions/setup-env
        # yarn-install is now handled below
        env:
          YARN_ENABLE_HARDENED_MODE: 0
      - name: Yarn Install
        shell: bash
        run: yarn install --immutable
      # @todo anvil fixtures cause dirty repo, but only in github actions ðŸ˜¢
      # - name: All Changes Committed
      #   shell: bash
      #   run: git diff --exit-code
      # Build step removed - image is pre-built
      - name: Install Playwright Dependencies
        run: yarn playwright playwright install --with-deps
      - name: Playwright Tests
        id: playwright
        shell: bash
        run: |
          # set debug logs if runner.debug is set
          # if [ "${{runner.debug}}" == "1" ]; then
          #   export DEBUG="test:*,app:*,api:*,next:*"
          # fi
          export DEBUG="api:*,app:*,test:*,-test:fixtures:snaplet:*"
          nohup tilt up playwright:deps &
          tilt_pid=$!
          echo "Tilt process started with PID: $tilt_pid"
          echo waiting for tilt to be ready
          for i in {1..10}; do
            curl -s http://localhost:10350 > /dev/null && break || echo "Attempt $i failed, trying again..."
            sleep 1
          done
          sleep 1
          echo tilt is ready
          max_attempts=90
          wait_timeout=10
          for ((i=1; i<=max_attempts; i++)); do
            echo "Attempt $i: Waiting for tilt with timeout ${wait_timeout}s"

            # Check if the Tilt process is still running
            if ! ps -p $tilt_pid > /dev/null; then
              echo "Tilt process (PID: $tilt_pid) is no longer running, exiting"
              exit 1
            fi

            # Check if any targets are in error
            has_errors=$(tilt dump engine | jq '
              .ManifestTargets
              | to_entries
              | map(
                  select(
                    .value.State.RuntimeState.Status == "error" or
                    (.value.State.BuildHistory | length > 0 and .[0].Error != null)
                  )
                )
              | length > 0
            ')

            if [ "$has_errors" = "true" ]; then
              echo "There are targets in error status:"
              tilt dump engine | jq '
                .ManifestTargets
                | to_entries
                | map(
                    select(
                      .value.State.RuntimeState.Status == "error" or
                      (.value.State.BuildHistory | length > 0 and .[0].Error != null)
                    )
                  )
                | map(.key)
              '
              exit 1
            fi

            if tilt wait --timeout "${wait_timeout}s" --for=condition=Ready "uiresource/playwright:deps"; then
              echo "Tilt is ready"
              break
            else
              echo "Tilt not ready, retrying..."
              if [ "${{runner.debug}}" == "1" ]; then
                tilt dump engine | jq '
                  .ManifestTargets
                  | to_entries
                  | map({key: (.value.State.RuntimeState.Status // "in_progress"), value: .key})
                  | group_by(.key)
                  | map({key: .[0].key, value: map(.value)})
                  | from_entries
                '
              fi
            fi
            if ((i == max_attempts)); then
              echo "Reached maximum attempts, exiting"
              exit 1
            fi
          done
          # never scheduler more than 4 workers or up to 50% of the available cores
          # this is due to concurrency issues within the send account sign up and resource contention
          workers=$(MAX_WORKERS=4 node ./.devops/bin/worker-count)
          yarn playwright test --workers=$workers --shard=${{ matrix.shard }}/4
      - name: Tilt Down
        # always run tilt down if tilt ci started
        if: always() && steps.playwright.outcome != 'skipped'
        shell: bash
        run: tilt down
      # Upload raw results per shard for merging later
      - name: Playwright Test Results
        uses: actions/upload-artifact@v4
        if: always() # Upload results even if tests fail
        with:
          name: playwright-test-results-shard-${{ matrix.shard }}
          path: packages/playwright/test-results/
          retention-days: 30
          if-no-files-found: ignore # Don't fail if no files found

  playwright-merge-reports:
    name: Playwright Merge Reports
    runs-on: arc-runner-set
    # Run this job even if previous jobs fail to capture results
    if: always()
    needs: [playwright-tests]
    # for writing PR comments
    permissions:
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
      - name: Setup Environment
        uses: ./.github/actions/setup-env
        env:
          YARN_ENABLE_HARDENED_MODE: 0
      - name: Download Shard Results
        id: download-artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true # Continue even if some artifacts are missing
        with:
          path: all-test-results/ # Put them in a subdirectory
          pattern: playwright-test-results-shard-* # Match artifact names
          merge-multiple: true # Merge into the single path directory

      # Create empty directory if no artifacts were downloaded
      - name: Create empty results directory if needed
        if: steps.download-artifacts.outcome == 'failure'
        run: |
          mkdir -p all-test-results/playwright-report
          echo "No test results were found. This could be because all test shards failed to run or produce artifacts." > all-test-results/playwright-report/README.md

      - name: Install Playwright Dependencies
        run: yarn playwright playwright install --with-deps

      - name: Merge Playwright Reports HTML
        id: merge-reports
        run: npx playwright merge-reports ./all-test-results --reporter html
        continue-on-error: true # Continue even if merge fails

      - name: Playwright Markdown Report
        if: always() # Always run regardless of previous step outcome
        id: playwright-md-report
        shell: bash
        run: |
          echo "------------------"
          # Assumes the markdown script reads from the default playwright-report directory
          export PLAYWRIGHT_REPORT_PATH=all-test-results/playwright-report
          if [ ! -f "all-test-results/report.json" ] && [ ! -d "all-test-results/playwright-report" ]; then
            echo "# Playwright Test Results\n\n## No test results available\n\nNo test results were found. This could be because tests failed to run or artifacts were not uploaded." > playwright-report.md
          else
            bun run packages/playwright/bin/report-markdown.ts > playwright-report.md || echo "# Playwright Test Results\n\n## Error generating report\n\nThere was an error generating the test report." > playwright-report.md
          fi
          cat playwright-report.md
          echo "------------------"

      - uses: mshick/add-pr-comment@v2
        if: always() && github.event_name == 'pull_request' # Only comment on PRs
        with:
          message-id: playwright-report # Use the same ID to update the comment
          refresh-message-position: true
          message-path: |
            playwright-report.md

      - name: Upload Merged Playwright Report
        uses: actions/upload-artifact@v4
        if: always() # Upload merged report even if subsequent steps fail
        with:
          name: playwright-merged-report
          path: all-test-results/
          retention-days: 30

  vercel-deploy-preview:
    # **always** skip if on dev and main since it will be deployed with another workflow
    if: ${{ github.ref != 'refs/heads/dev' && github.ref != 'refs/heads/main' && github.head_ref != 'dev' && github.head_ref != 'main'  }}
    runs-on: arc-runner-set

    permissions:
      pull-requests: write

    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup Environment
        uses: ./.github/actions/setup-env
        env:
          YARN_ENABLE_HARDENED_MODE: 0

      - name: Extract branch name
        id: extract-branch
        uses: ./.github/actions/extract-branch
      - name: Set Public Hostname
        id: public-hostname
        run: echo "public-hostname=sendapp-${{steps.extract-branch.outputs.branch}}-0xsend.vercel.app" >> $GITHUB_OUTPUT
      - name: Vercel Deploy Preview with Supabase Branch
        if: github.base_ref == 'dev'
        id: vercel-deploy-with-branch
        uses: ./.github/actions/vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          public-hostname: ${{ steps.public-hostname.outputs.public-hostname }}
          deploy-preview-extra-args: >-
            -e SUPABASE_DB_URL="${{ secrets.STAGING_SUPABASE_DB_URL }}"
            -e SUPABASE_JWT_SECRET="${{ secrets.STAGING_SUPABASE_JWT_SECRET }}"
            -e SUPABASE_SERVICE_ROLE="${{ secrets.STAGING_SUPABASE_SERVICE_ROLE }}"
            -e NEXT_PUBLIC_SUPABASE_URL="https://${{ secrets.STAGING_SUPABASE_PROJECT_ID }}.supabase.co"
            -e NEXT_PUBLIC_SUPABASE_PROJECT_ID="${{ secrets.STAGING_SUPABASE_PROJECT_ID }}"
            -e NEXT_PUBLIC_SUPABASE_GRAPHQL_URL="https://${{ secrets.STAGING_SUPABASE_PROJECT_ID }}.supabase.co/graphql"
            -e NEXT_PUBLIC_BASE_CHAIN_ID="84532"
            -e NEXT_PUBLIC_MAINNET_CHAIN_ID="11155111"
            -e NEXT_PUBLIC_BASE_RPC_URL="${{ secrets.BASE_SEPOLIA_RPC_URL }}"
            -e NEXT_PUBLIC_MAINNET_RPC_URL="https://ethereum-sepolia-rpc.publicnode.com"
            -e NEXT_PUBLIC_SUPABASE_ANON_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVncXRvdWxleGh2YWhldnN5c3VxIiwicm9sZSI6ImFub24iLCJpYXQiOjE2OTMwOTE5MzUsImV4cCI6MjAwODY2NzkzNX0.RL8W-jw2rsDhimYl8KklF2B9bNTPQ-Kj5zZA0XlufUA"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_GIT_COMMIT_SHA: ${{ github.sha }}
          VERCEL_GIT_COMMIT_REF: ${{ github.head_ref }}
          VERCEL_GIT_PULL_REQUEST_ID: ${{ github.event.pull_request.number }}
          SUPABASE_DB_URL: ${{ secrets.STAGING_SUPABASE_DB_URL }}
          SUPABASE_JWT_SECRET: ${{ secrets.STAGING_SUPABASE_JWT_SECRET }}
          SUPABASE_SERVICE_ROLE: ${{ secrets.STAGING_SUPABASE_SERVICE_ROLE }}
          NEXT_PUBLIC_SUPABASE_URL: https://${{ secrets.STAGING_SUPABASE_PROJECT_ID }}.supabase.co
          NEXT_PUBLIC_SUPABASE_PROJECT_ID: ${{ secrets.STAGING_SUPABASE_PROJECT_ID }}
          NEXT_PUBLIC_SUPABASE_GRAPHQL_URL: https://${{ secrets.STAGING_SUPABASE_PROJECT_ID }}.supabase.co/graphql
          NEXT_PUBLIC_BASE_CHAIN_ID: 84532
          NEXT_PUBLIC_MAINNET_CHAIN_ID: 11155111
          NEXT_PUBLIC_BASE_RPC_URL: ${{ secrets.BASE_SEPOLIA_RPC_URL }}
          NEXT_PUBLIC_MAINNET_RPC_URL: https://ethereum-sepolia-rpc.publicnode.com
          NEXT_PUBLIC_SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVncXRvdWxleGh2YWhldnN5c3VxIiwicm9sZSI6ImFub24iLCJpYXQiOjE2OTMwOTE5MzUsImV4cCI6MjAwODY2NzkzNX0.RL8W-jw2rsDhimYl8KklF2B9bNTPQ-Kj5zZA0XlufUA
      - name: Vercel Deploy Preview
        if: github.base_ref != 'dev'
        id: vercel-deploy-preview
        uses: ./.github/actions/vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          public-hostname: ${{ steps.public-hostname.outputs.public-hostname }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_GIT_COMMIT_SHA: ${{ github.sha }}
          VERCEL_GIT_COMMIT_REF: ${{ github.head_ref }}
          VERCEL_GIT_PULL_REQUEST_ID: ${{ github.event.pull_request.number }}

      - uses: mshick/add-pr-comment@v2
        if: github.base_ref == 'dev'
        with:
          message-id: vercel-preview-url
          refresh-message-position: true
          message: |
            Vercel Unique URL: [${{ steps.vercel-deploy-with-branch.outputs.deployment-url }}](${{ steps.vercel-deploy-with-branch.outputs.deployment-url }})
            Vercel Preview URL: [${{ steps.public-hostname.outputs.public-hostname }}](https://${{ steps.public-hostname.outputs.public-hostname }}/)
            Last Commit: ${{ github.event.pull_request.head.sha }}

      - uses: mshick/add-pr-comment@v2
        if: github.base_ref != 'dev'
        with:
          message-id: vercel-preview-url
          refresh-message-position: true
          message: |
            Vercel Unique URL: [${{ steps.vercel-deploy-preview.outputs.deployment-url }}](${{ steps.vercel-deploy-preview.outputs.deployment-url }})
            Vercel Preview URL: [${{ steps.public-hostname.outputs.public-hostname }}](https://${{ steps.public-hostname.outputs.public-hostname }}/)
            Last Commit: ${{ github.event.pull_request.head.sha }}
