name: "Deploy Vercel"
description: "Deploy the project to Vercel. Pulls environment information, builds the project, and deploys it to Vercel. Sets the Vercel alias."
inputs:
  vercel-token:
    description: "The Vercel token to use for deployment."
    required: true
  vercel-org-id:
    description: "The Vercel organization ID to use for deployment."
    required: true
  vercel-project-id:
    description: "The Vercel project ID to use for deployment."
    required: true
  vercel-scope:
    description: "The Vercel scope to use for deployment."
    required: false
    default: "0xsend"
  deploy-preview-extra-args:
    description: "The Vercel extra args to add to the deploy preview command. e.g. '-e NODE_ENV=production -e API_URL=https://api.example.com'"
    required: false
    default: ""
  public-hostname:
    description: "The public hostname alias to use for the deployment."
    required: false
    default: ""
  production:
    description: "Whether to deploy to the production environment."
    required: false
    default: "false"
outputs:
  deployment-url:
    description: "The URL of the deployment."
    value: ${{ steps.deploy.outputs.deployment_url }}
runs:
  using: "composite"
  steps:
    - name: Mask Vercel Token
      shell: bash
      run: |
        echo "::add-mask::${{ inputs.vercel-token }}"
        echo "::add-mask::${{ inputs.deploy-preview-extra-args }}"
    - name: Switch to Vercel Send team
      shell: bash
      run: bunx vercel --token=${{ inputs.vercel-token }} team switch ${{ inputs.vercel-scope }}
      env:
        VERCEL_ORG_ID: ${{ inputs.vercel-org-id }}
        VERCEL_PROJECT_ID: ${{ inputs.vercel-project-id }}
    - name: Pull Vercel Environment Information
      shell: bash
      run: bunx vercel --token=${{ inputs.vercel-token }} -S ${{ inputs.vercel-scope }} pull --yes --environment=preview
      env:
        VERCEL_ORG_ID: ${{ inputs.vercel-org-id }}
        VERCEL_PROJECT_ID: ${{ inputs.vercel-project-id }}
    - name: Build Project Artifacts
      shell: bash
      run: bunx vercel --token=${{ inputs.vercel-token }} -S ${{ inputs.vercel-scope }} build
      env:
        VERCEL_ORG_ID: ${{ inputs.vercel-org-id }}
        VERCEL_PROJECT_ID: ${{ inputs.vercel-project-id }}
    - name: Deploy Project Artifacts to Vercel
      id: deploy
      shell: bash
      run: |
        if [[ ${{ inputs.production }} == "true" ]]; then
          bunx vercel --token=${{ inputs.vercel-token }} -S ${{ inputs.vercel-scope }} deploy --prebuilt --prod > deployment-url.txt
        else
          bunx vercel --token=${{ inputs.vercel-token }} -S ${{ inputs.vercel-scope }} deploy --prebuilt ${{inputs.deploy-preview-extra-args}} > deployment-url.txt
        fi
        echo "deployment_url=$(cat deployment-url.txt)" >> $GITHUB_OUTPUT
        echo ::notice::Deployment URL: $(cat deployment-url.txt)
      env:
        VERCEL_ORG_ID: ${{ inputs.vercel-org-id }}
        VERCEL_PROJECT_ID: ${{ inputs.vercel-project-id }}
    - name: Set Vercel Branch Alias
      if: ${{ inputs.public-hostname != '' }}
      shell: bash
      run: |
        bunx vercel --token=${{ inputs.vercel-token }} -S ${{ inputs.vercel-scope }} alias set ${{ steps.deploy.outputs.deployment_url }} ${{ inputs.public-hostname }}
        echo ::notice::Vercel Alias URL https://${{ inputs.public-hostname }}/
      env:
        VERCEL_ORG_ID: ${{ inputs.vercel-org-id }}
        VERCEL_PROJECT_ID: ${{ inputs.vercel-project-id }}
