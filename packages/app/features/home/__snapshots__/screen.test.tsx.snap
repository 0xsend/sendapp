// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`HomeScreen should render with search when on / and a sendable account exists: render 1`] = `
<View
  style={
    {
      "flex": 1,
      "flexDirection": "column",
      "paddingTop": 7,
    }
  }
>
  <View
    style={
      {
        "paddingTop": 18,
      }
    }
  >
    <View
      style={
        {
          "position": "relative",
        }
      }
      testID="sendSearchContainer"
    >
      <View
        onLayout={[Function]}
        onSubmit={[Function]}
        style={
          {
            "alignSelf": "center",
            "flex": 1,
            "flexDirection": "column",
            "gap": 18,
            "justifyContent": "space-between",
            "width": "100%",
          }
        }
      >
        <View
          style={
            {
              "flexDirection": "column",
            }
          }
        >
          <View
            collapsable={false}
            jestAnimatedStyle={
              {
                "value": {
                  "transform": [
                    {
                      "translateX": 0,
                    },
                  ],
                },
              }
            }
            style={
              {
                "transform": [
                  {
                    "translateX": 0,
                  },
                ],
              }
            }
          >
            <TextInput
              accessibilityRole="search"
              aria-label="query"
              control={
                {
                  "_defaultValues": {
                    "query": "test",
                  },
                  "_disableForm": [Function],
                  "_executeSchema": [Function],
                  "_fields": {
                    "query": {
                      "_f": {
                        "mount": true,
                        "name": "query",
                        "ref": {
                          "name": "query",
                        },
                        "value": "test",
                      },
                    },
                  },
                  "_formState": {
                    "dirtyFields": {},
                    "disabled": false,
                    "errors": {},
                    "isDirty": false,
                    "isLoading": false,
                    "isSubmitSuccessful": false,
                    "isSubmitted": false,
                    "isSubmitting": false,
                    "isValid": false,
                    "isValidating": false,
                    "submitCount": 0,
                    "touchedFields": {},
                  },
                  "_formValues": {
                    "query": "test",
                  },
                  "_getDirty": [Function],
                  "_getFieldArray": [Function],
                  "_getWatch": [Function],
                  "_names": {
                    "array": Set {},
                    "focus": "",
                    "mount": Set {
                      "query",
                    },
                    "unMount": Set {},
                    "watch": Set {
                      "query",
                    },
                    "watchAll": false,
                  },
                  "_options": {
                    "mode": "onSubmit",
                    "reValidateMode": "onChange",
                    "shouldFocusError": true,
                  },
                  "_proxyFormState": {
                    "dirtyFields": false,
                    "disabled": true,
                    "errors": true,
                    "isDirty": false,
                    "isSubmitting": true,
                    "isValid": true,
                    "isValidating": false,
                    "touchedFields": false,
                  },
                  "_removeUnmounted": [Function],
                  "_reset": [Function],
                  "_resetDefaultValues": [Function],
                  "_state": {
                    "action": false,
                    "mount": true,
                    "watch": false,
                  },
                  "_subjects": {
                    "array": {
                      "next": [Function],
                      "observers": [],
                      "subscribe": [Function],
                      "unsubscribe": [Function],
                    },
                    "state": {
                      "next": [Function],
                      "observers": [
                        {
                          "next": [Function],
                        },
                        {
                          "next": [Function],
                        },
                      ],
                      "subscribe": [Function],
                      "unsubscribe": [Function],
                    },
                    "values": {
                      "next": [Function],
                      "observers": [
                        {
                          "next": [Function],
                        },
                        {
                          "next": [Function],
                        },
                      ],
                      "subscribe": [Function],
                      "unsubscribe": [Function],
                    },
                  },
                  "_updateDisabledField": [Function],
                  "_updateFieldArray": [Function],
                  "_updateFormState": [Function],
                  "_updateValid": [Function],
                  "getFieldState": [Function],
                  "handleSubmit": [Function],
                  "register": [Function],
                  "setError": [Function],
                  "unregister": [Function],
                }
              }
              focusVisibleStyle={{}}
              focusable={true}
              id=":r0:"
              name="query"
              onBlur={[Function]}
              onChangeText={[Function]}
              onFocus={[Function]}
              placeholder="Search..."
              placeholderTextColor="#081619"
              readOnly={false}
              style={
                {
                  "backgroundColor": "#111f22",
                  "borderBottomColor": "#343434",
                  "borderBottomLeftRadius": 9,
                  "borderBottomRightRadius": 9,
                  "borderBottomWidth": 1,
                  "borderLeftColor": "#343434",
                  "borderLeftWidth": 1,
                  "borderRightColor": "#343434",
                  "borderRightWidth": 1,
                  "borderStyle": "solid",
                  "borderTopColor": "#343434",
                  "borderTopLeftRadius": 9,
                  "borderTopRightRadius": 9,
                  "borderTopWidth": 1,
                  "color": "#FFFFFF",
                  "fontFamily": "System",
                  "fontSize": 19.2,
                  "fontStyle": "normal",
                  "fontWeight": "bold",
                  "height": 44,
                  "minWidth": 0,
                  "paddingLeft": 16,
                  "paddingRight": 40,
                  "position": "relative",
                }
              }
              value="test"
            />
          </View>
          <View
            style={
              {
                "bottom": 10,
                "gap": 7,
                "position": "absolute",
                "right": 18,
              }
            }
          />
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`HomeScreen should render with search when on / and a sendable account exists: search 1`] = `
<View
  style={
    {
      "flex": 1,
      "flexDirection": "column",
      "paddingTop": 7,
    }
  }
>
  <View
    style={
      {
        "paddingTop": 18,
      }
    }
  >
    <View
      style={
        {
          "position": "relative",
        }
      }
      testID="sendSearchContainer"
    >
      <View
        onLayout={[Function]}
        onSubmit={[Function]}
        style={
          {
            "alignSelf": "center",
            "flex": 1,
            "flexDirection": "column",
            "gap": 18,
            "justifyContent": "space-between",
            "width": "100%",
          }
        }
      >
        <View
          style={
            {
              "flexDirection": "column",
            }
          }
        >
          <View
            collapsable={false}
            jestAnimatedStyle={
              {
                "value": {
                  "transform": [
                    {
                      "translateX": 0,
                    },
                  ],
                },
              }
            }
            style={
              {
                "transform": [
                  {
                    "translateX": 0,
                  },
                ],
              }
            }
          >
            <TextInput
              accessibilityRole="search"
              aria-label="query"
              control={
                {
                  "_defaultValues": {
                    "query": "test",
                  },
                  "_disableForm": [Function],
                  "_executeSchema": [Function],
                  "_fields": {
                    "query": {
                      "_f": {
                        "mount": true,
                        "name": "query",
                        "ref": {
                          "name": "query",
                        },
                        "value": "testtest",
                      },
                    },
                  },
                  "_formState": {
                    "dirtyFields": {
                      "query": true,
                    },
                    "disabled": false,
                    "errors": {},
                    "isDirty": false,
                    "isLoading": false,
                    "isSubmitSuccessful": false,
                    "isSubmitted": false,
                    "isSubmitting": false,
                    "isValid": true,
                    "isValidating": false,
                    "name": "query",
                    "submitCount": 0,
                    "touchedFields": {
                      "query": true,
                    },
                  },
                  "_formValues": {
                    "query": "testtest",
                  },
                  "_getDirty": [Function],
                  "_getFieldArray": [Function],
                  "_getWatch": [Function],
                  "_names": {
                    "array": Set {},
                    "focus": "",
                    "mount": Set {
                      "query",
                    },
                    "unMount": Set {},
                    "watch": Set {
                      "query",
                    },
                    "watchAll": false,
                  },
                  "_options": {
                    "mode": "onSubmit",
                    "reValidateMode": "onChange",
                    "shouldFocusError": true,
                  },
                  "_proxyFormState": {
                    "dirtyFields": false,
                    "disabled": true,
                    "errors": true,
                    "isDirty": false,
                    "isSubmitting": true,
                    "isValid": true,
                    "isValidating": false,
                    "touchedFields": false,
                  },
                  "_removeUnmounted": [Function],
                  "_reset": [Function],
                  "_resetDefaultValues": [Function],
                  "_state": {
                    "action": false,
                    "mount": true,
                    "watch": false,
                  },
                  "_subjects": {
                    "array": {
                      "next": [Function],
                      "observers": [],
                      "subscribe": [Function],
                      "unsubscribe": [Function],
                    },
                    "state": {
                      "next": [Function],
                      "observers": [
                        {
                          "next": [Function],
                        },
                        {
                          "next": [Function],
                        },
                      ],
                      "subscribe": [Function],
                      "unsubscribe": [Function],
                    },
                    "values": {
                      "next": [Function],
                      "observers": [
                        {
                          "next": [Function],
                        },
                        {
                          "next": [Function],
                        },
                      ],
                      "subscribe": [Function],
                      "unsubscribe": [Function],
                    },
                  },
                  "_updateDisabledField": [Function],
                  "_updateFieldArray": [Function],
                  "_updateFormState": [Function],
                  "_updateValid": [Function],
                  "getFieldState": [Function],
                  "handleSubmit": [Function],
                  "register": [Function],
                  "setError": [Function],
                  "unregister": [Function],
                }
              }
              focusVisibleStyle={{}}
              focusable={true}
              id=":r0:"
              name="query"
              onBlur={[Function]}
              onChangeText={[Function]}
              onFocus={[Function]}
              placeholder="Search..."
              placeholderTextColor="#081619"
              readOnly={false}
              style={
                {
                  "backgroundColor": "#111f22",
                  "borderBottomColor": "#343434",
                  "borderBottomLeftRadius": 9,
                  "borderBottomRightRadius": 9,
                  "borderBottomWidth": 1,
                  "borderLeftColor": "#343434",
                  "borderLeftWidth": 1,
                  "borderRightColor": "#343434",
                  "borderRightWidth": 1,
                  "borderStyle": "solid",
                  "borderTopColor": "#343434",
                  "borderTopLeftRadius": 9,
                  "borderTopRightRadius": 9,
                  "borderTopWidth": 1,
                  "color": "#FFFFFF",
                  "fontFamily": "System",
                  "fontSize": 19.2,
                  "fontStyle": "normal",
                  "fontWeight": "bold",
                  "height": 44,
                  "minWidth": 0,
                  "paddingLeft": 16,
                  "paddingRight": 40,
                  "position": "relative",
                }
              }
              value="testtest"
            />
          </View>
          <View
            style={
              {
                "bottom": 10,
                "gap": 7,
                "position": "absolute",
                "right": 18,
              }
            }
          />
        </View>
      </View>
    </View>
  </View>
  <RCTScrollView
    scrollEnabled={true}
    style={
      [
        {
          "gap": 32,
          "marginTop": 40,
        },
        {
          "initial": {
            "updater": [Function],
            "value": {
              "opacity": 0,
              "transform": [
                {
                  "translateY": -10,
                },
              ],
              "width": "100%",
            },
          },
          "jestAnimatedStyle": {
            "current": {
              "value": {
                "opacity": 0.5498890994849505,
                "transform": [
                  {
                    "translateY": -4.501109005150486,
                  },
                ],
                "width": {
                  "__prefix": "",
                  "__suffix": "%",
                  "callStart": null,
                  "callback": [Function],
                  "current": "100%",
                  "finished": true,
                  "lastTimestamp": 0,
                  "omega0": 14.433756729740644,
                  "omega1": 11.785113019775793,
                  "onFrame": [Function],
                  "onStart": [Function],
                  "reduceMotion": false,
                  "startTimestamp": 3300,
                  "startValue": 100,
                  "strippedCurrent": 100,
                  "timestamp": 3300,
                  "toValue": 100,
                  "velocity": 0,
                  "zeta": 0.5773502691896257,
                },
              },
            },
          },
          "viewDescriptors": {
            "add": [Function],
            "remove": [Function],
            "shareableViewDescriptors": {
              "_isReanimatedSharedValue": true,
              "_value": [],
              "addListener": [Function],
              "modify": [Function],
              "removeListener": [Function],
              "value": [],
            },
          },
          "viewsRef": {
            "add": [Function],
            "items": Set {},
            "remove": [Function],
          },
        },
      ]
    }
    testID="searchResults"
  >
    <View>
      <View
        style={
          {
            "flexDirection": "column",
            "gap": 16,
          }
        }
      >
        <Text
          accessibilityRole="header"
          style={
            {
              "color": "#B3B3B3",
              "fontFamily": "System",
              "fontSize": 19.2,
              "fontWeight": "400",
              "lineHeight": 21,
              "marginBottom": 0,
              "marginLeft": 0,
              "marginRight": 0,
              "marginTop": 0,
              "textTransform": "uppercase",
              "userSelect": "auto",
            }
          }
          suppressHighlighting={true}
        >
          tag
        </Text>
        <View
          style={
            {
              "flexDirection": "row",
              "flexWrap": "wrap",
              "gap": 24,
            }
          }
        >
          <View
            style={
              {
                "borderBottomLeftRadius": 10,
                "borderBottomRightRadius": 10,
                "borderTopLeftRadius": 10,
                "borderTopRightRadius": 10,
                "width": "100%",
              }
            }
          >
            <View
              href="/send?idType=tag&recipient=test&amount=test&sendToken=test&note=test"
              testID="MockSolitoLink"
            >
              <View
                style={
                  {
                    "alignItems": "center",
                    "flexDirection": "row",
                    "gap": 18,
                  }
                }
                testID="tag-search-3665"
              >
                <View
                  style={
                    {
                      "alignItems": "center",
                      "borderBottomLeftRadius": 7,
                      "borderBottomRightRadius": 7,
                      "borderTopLeftRadius": 7,
                      "borderTopRightRadius": 7,
                      "flexDirection": "column",
                      "height": 48,
                      "justifyContent": "center",
                      "maxHeight": 48,
                      "maxWidth": 48,
                      "minHeight": 48,
                      "minWidth": 48,
                      "overflow": "hidden",
                      "position": "relative",
                      "width": 48,
                    }
                  }
                >
                  <View
                    style={
                      {
                        "bottom": 0,
                        "flexDirection": "column",
                        "left": 0,
                        "position": "absolute",
                        "right": 0,
                        "top": 0,
                        "zIndex": 1,
                      }
                    }
                  >
                    <Image
                      fullscreen={true}
                      onError={[Function]}
                      onLoad={[Function]}
                      source={
                        {
                          "uri": "https://avatars.githubusercontent.com/u/123",
                        }
                      }
                      style={
                        {
                          "height": 48,
                          "width": 48,
                        }
                      }
                      testID="avatar"
                    />
                  </View>
                  <View
                    style={
                      {
                        "bottom": 0,
                        "flexDirection": "column",
                        "left": 0,
                        "position": "absolute",
                        "right": 0,
                        "top": 0,
                        "zIndex": 0,
                      }
                    }
                  >
                    <View
                      style={
                        {
                          "alignItems": "center",
                          "borderBottomLeftRadius": 7,
                          "borderBottomRightRadius": 7,
                          "borderTopLeftRadius": 7,
                          "borderTopRightRadius": 7,
                          "flexDirection": "column",
                          "height": 48,
                          "justifyContent": "center",
                          "maxHeight": 48,
                          "maxWidth": 48,
                          "minHeight": 48,
                          "minWidth": 48,
                          "overflow": "hidden",
                          "position": "relative",
                          "width": 48,
                        }
                      }
                    >
                      <View
                        style={
                          {
                            "bottom": 0,
                            "flexDirection": "column",
                            "left": 0,
                            "position": "absolute",
                            "right": 0,
                            "top": 0,
                            "zIndex": 1,
                          }
                        }
                      >
                        <Image
                          fullscreen={true}
                          onError={[Function]}
                          onLoad={[Function]}
                          source={
                            {
                              "uri": "https://ui-avatars.com/api.jpg?name=test&size=256",
                            }
                          }
                          style={
                            {
                              "height": 48,
                              "width": 48,
                            }
                          }
                        />
                      </View>
                      <View
                        style={
                          {
                            "bottom": 0,
                            "flexDirection": "column",
                            "left": 0,
                            "position": "absolute",
                            "right": 0,
                            "top": 0,
                            "zIndex": 0,
                          }
                        }
                      >
                        <Text
                          style={
                            {
                              "color": "#FFFFFF",
                              "fontFamily": "System",
                              "fontSize": 16.8,
                              "fontWeight": "400",
                              "lineHeight": 19,
                              "userSelect": "auto",
                            }
                          }
                          suppressHighlighting={true}
                        >
                          ??
                        </Text>
                      </View>
                    </View>
                  </View>
                </View>
                <View
                  style={
                    {
                      "flexDirection": "column",
                      "gap": 2,
                    }
                  }
                >
                  <Text
                    style={
                      {
                        "color": "#B3B3B3",
                        "fontFamily": "System",
                        "fontSize": 24,
                        "fontWeight": "300",
                      }
                    }
                    suppressHighlighting={true}
                  >
                    <Text
                      style={
                        {
                          "color": "#FFFFFF",
                          "fontFamily": "System",
                          "fontWeight": "500",
                        }
                      }
                      suppressHighlighting={true}
                    >
                      test
                    </Text>
                  </Text>
                  <Text
                    style={
                      {
                        "color": "#FFFFFF",
                        "fontFamily": "System",
                        "fontSize": 16.8,
                      }
                    }
                    suppressHighlighting={true}
                  >
                    /test
                  </Text>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;
